ext.dataDir = "$rootDir/data"

task factbookDownload(type: Download) {
    destinationDir file("$dataDir")
    url    'http://jmatchparser.sourceforge.net/factbook/data/factbook.xml.gz'
//   'http://jmatchparser.sourceforge.net/factbook/data/factbook.xsd'
    doLast {
        ant.gunzip src: destinationFile, dest: destinationDir
    }
}

task factbookCountriesXml(dependsOn: factbookDownload) {
    inputs.file  "$dataDir/factbook.xml"
    outputs.file "$dataDir/factbook-countries.xml"

    // examples: http://stackoverflow.com/questions/8337145/optimization-of-xslt-using-identity-transform
    doLast {
        ant.xslt style: "$dataDir/factbook-countries.xsl",
                out: outputs.files.singleFile,
                in: inputs.files.singleFile

    }
}

task factbookCountriesJson(type: Exec, dependsOn: factbookCountriesXml)  {
    inputs.file  "$dataDir/factbook-countries.xml"
    outputs.file "$dataDir/factbook-countries.json"
    outputs.files.singleFile.delete()
    workingDir dataDir
    standardOutput = new ByteArrayOutputStream()

    // Escape quotes before JSON conversion
    doFirst {
        def jsonText = inputs.files.singleFile.text
        jsonText = jsonText.replace("\"", "\\\"");
        file("$dataDir/factbook-countries-clean.xml").write(jsonText)
    }

    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', "java -classpath saxon9.jar net.sf.saxon.Transform factbook-countries-clean.xml xml-to-json.xsl > $outputs.files.singleFile.name"
    } else {
        commandLine 'sh', '-c',  "java -classpath saxon9.jar net.sf.saxon.Transform factbook-countries-clean.xml xml-to-json.xsl > $outputs.files.singleFile.name"
    }

    doLast {
        file("$dataDir/factbook-countries-clean.xml").delete()
        outputs.files.each {
            if (it.name.substring(it.name.lastIndexOf(".")) == ".json") {
                it.setText(groovy.json.JsonOutput.prettyPrint(it.text))
            }
        }
    }
}

task factbookCountries(dependsOn: factbookCountriesJson)

///////////////////////////////////////////////
////////////// Groovy Task Class //////////////
///////////////////////////////////////////////
class Download extends DefaultTask {
    @Input File destinationDir
    @Input String url
    @Input @Optional String xsdUrl

    @TaskAction
    download() {
        destinationFile.bytes = new URL(url).bytes
    }

    String getDownloadFileName() {
        url.substring(url.lastIndexOf('/'))
    }

    @OutputFile
    File getDestinationFile() {
        new File(destinationDir, downloadFileName)
    }
}
